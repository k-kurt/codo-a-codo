VIDEO DE LAS CLASES EN YT

    https://www.youtube.com/watch?v=FkOuRReOcQQ&list=PLR4uT20PbqJDMrBqYl_WoeIKJ7MB0kx9c&index=19


https://dev.to/sapardo/etiquetas-semanticas-de-html5-3j7m
https://favicon.io/
https://tablericons.com/
https://app.netlify.com/


las etiquetas nos ayuda a tener un default y despues personalizar con las clases o id
h1,h2,h3,h4{
    background-color: blue;
}




https://fonts.google.com/
https://fontawesome.com/
https://htmlcolorcodes.com/es/
https://developer.mozilla.org/es/docs/Web/CSS/background-image      mdn web docs


pase lo que pase con la ventana si usamos px va a quedar de gual manera por que relativo 


https://developer.mozilla.org/en-US/docs/Web/CSS/position

--------------------------------------------------clase 9----------------------------------------------
la seudoclase es para generar un especie de evento a un elemento

https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes

https://developer.mozilla.org/es/docs/Web/CSS/:focus

https://bennettfeely.com/clippy/

https://animate.style


--------------------------------------------------clase 10----------------------------------------------
MEDIA QUERY para WEB RESPONSI
    formato parecido a las funciones son las media QUERY
    

DISPLAY
FLEX
    la asignamos el flex al contenedor, con solo poner en el contenedor el display: flex; le estamos diciendo que los elementos los queremos horizontales de star al end
    flex va el star que es por defecto, tambien puede end y center

flex-direction
    con el column se disponen de manera vertical
    con el row se dispone uno al lado del otro que es el default
    con el row-reverse el ultimo se pone al principio en horizontal
    con el flex-wrap: wrap; agrega una fila cuando no entra mas elementos
    con el flex-direction: column-reverse; pone en columna los elementos del ultimo al primero
    con el Justify-content: center o end o star; star por defecto.
    con el space around el espacio de los costados es la mitad de entre ellos
    con el beetween solo hay espacio entre ellos
    con el evenly es espacio es igual entre ellos y los bordes

gap
    gap: 1rem; separa los elementos entre ellos pero no del contenedor


order
    ordena el elemento donde querramos que este en comparacion con los demas, contando el 0


aling-item
    alinear verticalmente(acrox y)
    strech ocupa todo el esapcio disponible
    center  centro verticalmente
    flex-end; lo pone al final de todo en la parte inferior halbando verticalmente
    justify-content: center; aliena tanto vertical como horzaontalmente todo en el centro
    


Media Query
	si queremos hacer responsive la pagina con el display: flex; y las media Query podemos jugar con eso

Ej: 
	@media screen and (max-width:375px){
		.container{
			flex-direction. column;
		}
	}

antes estaban en display: flex; que ponia en horizontal los elementos, con el media Query con dispositivos moviles menor a 375px los
elementos se ponen en posicion vertical


--------------------------------------------------clase 11----------------------------------------------
BOOSRAP
    https://getbootstrap.com/


--------------------------------------------------clase 12----------------------------------------------
GitHub

https://docs.github.com/es/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

git flow
    son todas las ramas demotrada graficamente 

git branch
     para moverse entre ramas

git status
    nos dice que archivos o directorios fueron modificados

git add css/style.css
git add .
    el punto agrega todo o podemos hacerlo pr directorio o archivos, todo se agrega al stash

git commit -m "agregado de archvios style.css. index.html y secundaria.html"
    para commitiar, guardarlo, empaquetarlo ante de hacer push al remoto

git push origin main
    el origin nos dice a que repositorio remoto queremos subir y a que rama con el main





--------------------------------------------------clase 13----------------------------------------------
GitHub
cotinua la clase 

Servidores
    la comunicacion entre cliente-servidor mediante un protocolo
    Hay diferente servidores que brindan diefrentes servidores: servidores ftp para arcgivos, de mails, de pagnas. etc

protocolo MSTP
    para mails personalizados

protocolo https
    es el que vamos a utilizar, se unifica todo en el modelo cliente-servidor que se utiliza para conectar cualquier
    tipo de cliente web a un servidor 


SCRUM
    es una metedologia de trabajo, es un metodo agil de trabajar, trabajar en equipo para la mejora continua de efrentar los
    prblemas




--------------------------------------------------clase 14----------------------------------------------
JAVASCRIPT

var producto = "audifonos Gamer"; 
            "=" es igual a " se le asigna a ... "
            se puede asignar string con comillas simples o dobles en js 

            un numero double e int son iguales en js 

            solo permite guion bajo "_" en el inicio de una variable

            undefined es cuando queremos hacer algun maneje con una variable  y no esta definido 
            Nan es igual a Not a number es cuando queremos hacer una operacion como pasar un string a numero 
            y no contiene numero ese sring


let 
            la diferencia con el alcance de la variable, let tiene mas alcance 
            var es menos global y let mas global

            let te permite declarar variables limitando su alcance (scope) al bloque, declaración, o expresión donde 
            se está usando. a diferencia de la palabra 
            clave var la cual define una variable global o local en una función sin importar el ámbito del bloque.

const 
            la variable declarada con const no puede cambiar su valor despues
            siempre tiene que tener un tipo de dato declarado, no puede estar vacio



ParseFloat

        var stringANumerico=parseFloat("123.1a");

        console.log(StringANumro);

            cambia el string por numero e ignora a la letra 'a'



--------------------------------------------------clase 15----------------------------------------------

 la clase 15/JS2

OPERADORES CONDICIONAES

    ==
    !=
    <
    >
    ||
    &&


    OPERACION TERNEARIA 

let max=(num1>num2) ? "el primer numero es el maor"
: "el segundo es mayor";

es mas simple no se puede varias lineas

--------------------------------------------------clase 16----------------------------------------------

CLASE JS2 02/05 en Youtube


SWITCH

let aux= true;

switch(aux){
    case true:
        console.log("la variable contiene un true");
        breack;

    case false:
        console.log("la variale contiene un 2");
        breack;
    case 1:
        console.log("la varialb econtiene un 3");
        breack;
    case 4:
        console.log("la varialb econtiene un 4");
        breack;
    case hola:
        console.log("la varialb econtiene un 5");
        breack;    
    default:
            console.log("La variable contiene un valor no valido.");
            brack;
}

//CICLOS



//WHILE

let contador=0;
while(contador <=20){
        console.log(contador);
        contador++;
}


do{
    console.log("hola");
}while(true);

//FOR 


for(let i=0;i>=0;i++){
    console.log(i);
}

//VECTOR

    var numbers=[1,2,10,15];




let palabra="hola este es un texto largo, no soy un redactor...";

console.log(palabra.indexOf("soy)); //buscar un palabra en un texto largo

console.log(palabra.toUpperCase()); //poner en mayuscula todo

console.log(palabra.replace("teto", "texto aburrido y largo")); //reemplazar texto de un string, la primera es la que busca y las segunda por la que reemplaza

console.log(palabra.charCodeAt(0)); //obtiene el codigo en decimal 

console.log(palabra.charAt(0)); //muestra el caracter directamente


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
donde dice metodo instance en la derecha




--------------------------------------------------clase 17----------------------------------------------

JS3 04/05 



ARRAY
    
    const numero=[];        cualquier tipo de array, de datos
    const numero=[1,3,4,5,6];        array tipo numeros
    const numero=new Array("enero","marzo,"febrero");       //creando un array de una clase pasando los parametros entre parentesis
    let arreglo=["hola",10,true,"si",null,{nombre:"juan",trabajo:"programador"},[1,2,[1,2]]];      es un mejunge de cosas que si se puede

    console.table(numero);  //muestra como si fuese una tabla el array


    let matriz = [[1,2,3],[4,5,6],[7,8,9]];
    console.table(matriz);

    //ejercicio para mi, modificar una posicion para ver dimension



//RECORRER UN ARRAY

    const meses=new Array("enero", "Febrero", "marzo", "Abril", "Mayo");

    for(let i=0; i<meses.length; i++){
        console.log(meses[i]);
    }




AGREGAR ELEMENTO AL ARRAY

    numero[5]=4;

    numeros.push(70);       agrega al final

    numero.push(80,90,100);

    numeros.unshift(-30,-20,-10);       agrega al principio


ELIMINAR ELEMENTOS DE UN ARRAY

    numeros.pop();     elmina el ultimo

    numero.shift();     elimina el primero

    numeros.splice(2,1);        puedo eliminar tantos elementos que quisiera de donde quisiera
                                subindice que inicia, cantidad de elementos que elimina, desde el indice 2 eliminar 
                                1 elemento, y si pongo mas alto el numero borra hacia la derecha


REST OPERATOR O SPREAD OPERATOR
    //Nos permite anexar o hacer referencia un determinado elemento de un array

    const meses =["septiembre", "octubre"];

    const nuevoArreglo=new Aray["...meses, "junio","julio","agosto", ...meses2];       entonces concatena arreays 


BUCLE FOR

//recorrer un array

    for(let i=0;i<meses.length;i++){
        console.log(meses[i]);

    }



FUNCIONES

    function sumar() {
        let numero1=5, numero2=10;
        console.log(numero1+numero2);

    }

    otra forma de declarar una funcion 

EXPRESION DE UNA FUNCION 

    const sumar2= function (){
        console.log(3+3);
    }

    sumar2();

    no funciona si llamo a la funcion antes de la inicializacion en cambio la anterior si, esta no por que estamos
    guardando una funcion en una variable y estas se guardan secuencialmente 



IIFE se invocan a si mismas, no son recomendables para reutilizar

(function (){
    console.log("Esto es una funcion");
})(); 

//son como recursivas


PARAMETROS Y ARGUMENTOS

    function sumar3(n1,n2){
        console.log(n1+n2);
    }

    sumar3(5,1);



JS3 TERMINADO
--------------------------------------------------clase 18----------------------------------------------

JS4 09/05




    USAR RETURN EN LA FUNCION       para poder guardar en una variable donde fue emvocada la funcion


function retornaSuma(num1,num2){
    return num1+num2;
}

let resultado=retornarSuma(2,3);    //es importante entender el return por que a veces es necesario guardar el resultado en una variables 
                                    para poder ser utilizada luego

let promedio=resultado/2;

console.log("el resultado es: "+promedio);



//Manejando Returns


    //es importante entender que no esta mal tener tantos returns por que la ejecucion se detiene en cada bloque por que se cumple la condicion
    //y se guarda el resultado en cada return 
    //puede retornar cualquier tipo de valor aun en la misma funcion, cualqueir tipo de dato

function cualEsMayor(num1, num2){

    if(num1>num2){
        return "El numero 1 es mayor que el numero 2";
    }if(num2>num1){
        return "el numero 2 es mayor que el numero 1";
    }

    return "son iguales";
}

    const mensaje=cualEsMayor(9,4);
    console.log(mensaje);

    //console.log(cualEsMayor(4,2));






function mayorQue(num1,num2){
    if(num1!=num2){
            cons res=Math.max(num1,num2);       //esta funcion analiza cual es el valor maximo de los argumentos que pasamos
            return"el mayor es: + res;
    }
    return "los numeros son iguales";
}

const resultado2 =mayorque(20,30);
console.log(resultado);



//funciones de JavaScript

resultado=Math.PI;
resultado=Math.round(2.4);
resultado=Math.ceil(2.1);       //redondea siempre hacia arriba
resultado=Math.floor(2.9);      //redondea siempre hacia abajo
resultado=Math.sqrt(16);
resultado=Math.abs(144);        //el modulo    
resultado=Math.max(-4.5,2,1,100,3,0);
resultado=Math.random();

resultado=(Math.floor(Math.random()*100))+1;

console.log(resultado);



CALLBACKS--------------------------------------

//llama a ua fucion detro de otra funcion 



function mensaje(vooleano){
    console.log(voolano);
}

function llamadaFunc(number,pepe){
    if(number==1){
        pepe(true);
    }else{
        pepe(false);
    }
}

llamadaFunc(1,mensaje);

//elegimos el nombre del argumento que nosotros queremos, en este caso pepe 

---------------------

function llamadaFunc(number,pepe){
    if(number==1){
        pepe(true);
    }else{
        pepe(false);
    }
}


llamadaFunc(1,analiza);



function analiza(booleano){
    if(booleano==true){
        console.log("soy el 1");

    }else{
        console.log("soy distinto de 1");
    }
}


//la llamda de la funcion llmadaFunc con analiza, pasa un 1, en la funciona llamdaFunc si es 1 a pepe osea analiza se queda en true
//lo que repliza en analiza en la funcion en el argumento booleano que es pasado como true. 


-------Closures-----------------------------


        // Nos permite definir una funcion dentro de otra y nos permite llamdarla dentro de esa funcion 


function iniciar(){
    var nombre="Codo a Codo";   //la variable nombre es una variable local creada por iniciar
    function mostrarNombre(){   //la funcion mostrarNombre es una funcion interna, una clausura.
        alert(nombre);          //usa una variable declarada en la funcion externa.
    }
        mostrarNombre();
   }


    //mostrarnombre();

    iniciar();





-------Arrow Functions-----------------------------

    //se utiliza en ciertas funciones de JavaScript donde se solicita este tipo de funciones


//funcion tradicional
fuction fnc(a){
    return a+100;

}

//desglose de la funcion flecha

// 1.Eelimina la palabra "function" y el nombre, luego coloca la flecah entre el argumento y la llave de apertura.
(a) => {
    return a+100;
}

// 2. quita las llaves del cuerpo y la palabgra "return" - el return esta implicito.
    (a) => a + 100;

// 3. Suprime los parantesis de los argumentos.
    a => a + 100;


// Funcion tradicional
    function fnc2(a, b){
    return a + b + 100;
}


// Funcion flecha
    (a,b) => a + b + 100;


// Funcion tradicional (sin argumentos)

    let a=4;
    let b=2;
    function fnc3(){
        return a+b+100;
    }

// Funcion flecha (sin argumentos)
let a1=4;
let a2=2;
()=>a1+b2+100;

//En caso de que tengamos mas d euna linea dentro de la funcion

// Funcion tradicional

funcion fnc4(a,b){
    let chuck=42;
    return a+b+chuck;
}

// Funcion flecha
(a,b)=>{
    let chuck=42;
    return a+b+chuck; 
}

//el return se vuelve a poiner por que cuando hay unbloque de ejecucion el return no es implicito



-------callback + arrow fuction------------


const array1=['a','b','c'];

array1.forEach(element=>console.log(element));  //el forEach toma cada elemento del array y lo guarda en la var element y lo muestra 


// callback puro 

const array1=['a','b','c'];

let element = e=>console.log(e);

array1.forEach(element);


// El forEach no retorna un valor en cambio el map si, por que crea un array nuevo



const array=[1,4,9,16];

//pass a function to mapconst doble = array.map(element=>element*2);

console.log(doble);


//ARRAY.FILTER----------------

const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]



//Array.every()---------------

    //el resultado va a ser true o false dependiendo si todos los elementos cumplen con la condicion

const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array



--------------------------------------------------clase 19----------------------------------------------
CLASE JS4 11/5


----OBJETOS EN JS--------------------------

const persona={
    nombre:"maria",
    apellido:"perez",
    dni:3546443,
    esmayor: true,


    caminar: function(){
        console.log("la persona "+this.nombre+" esta caminando...");        //la palabra this hace referencia directamente a la variable que esta dentro de la estructura
    }
}

//persona.nombre="carlos";

//persona.caminar();

conosle.log(persona.nombre+" "+persona.apellido);


---OBJETO LITERAL SIN NOMBRE EN UN ARRAY--------------

const arreglo=[persona,{nombre:"maria", apellido:"perez", dni:3546443, esmayor: true, caminar: function(){}}];

console.table(arreglo);

//se puede tener un objeto sin nombre en un array por que se inditifica con los subindices los argumentos

-----
//arreglo es el de arriba que esta modificando aca abajo


arreglo.forEach(function(p){

        if(p.nombre=="miriam")
        p.esMayor=false;
    });


    //guarda en un array nuevo los que cumplen con la condicion

    const arregloNuevo + arreglo.filter(p=>p.apellido.charAt(0)=='G' || p.apellido.charAt(0)=='g');


        persona.nuevo="algoNuevo";          //la propiedad nuevo es algo magico en JS, agrega el argumento al onjeto sin declararlo




//agregar al nuevo a todo los argumentos del arreglo

    arreglo.forEach(p=>p.nuevo="same");


    console.table(areglo);





------querySelector---------------------------------------

//para seleccionar elementos del documento html

const heading=document.querySelector('.header__texto h2');      retorna 0 o 1 elemento, la primera coincidencia 

const heading=document.querySelector('#heading');  //la fomra recomendable


console.log(heading);

//agregar texto nuevo

    heading.textContent='nuevo Heading';

//agregar una nueva clase

    heading.classList.add('nueva-clase');

console.log(heading);





JS5 TERMIANDO

--------------------------------------------------clase 20----------------------------------------------
JS6 16/5

------querySelectorAll---------------------------------------
//muchos elementos en una sola variable, va a ser un vertor o array que contenegan elementos u objetos de html

const enlaces=document.querySelectorAll('.navegacion a');

//obtener objetos separados de ese array
enlaces.forEach(link=>console.log(link));

console.log(enlaces);


enlace[0].textContent='pagina de Google';
//modificar link
enlace[0]href='http://google.com';





----getElementById------------------------------------------
//trae elementos con el ID, uno solo

const heading2=document.getElementById('heading');

console.log(heading2);






----Generar un nuevo link------------------------------------------
    
    
    //crear un nuevo elemento y mandarlo al html


const nuevoLink=document.createElement('a');        //entre parentesis va el elemento al que hacemos referencia
                                                    //a para link, h2 para titutloH2, p para parrafo    

//href
nuevoLink.href='www.google.com';
//texto
nuevolink.textContent='Link a google';
//clase
nuevolink.classList.add('navegacion__enlace');



const nuevoLink2=document.createElement('A');

//href
nuevoLink2.href='www.google.com';
//texto
nuevoLink2.textContecnt='link de google2';
//clase
nuevoLink2.classList.add('navegacion__enlace');

//agregarlo al documento
const navegacion=document.querySelectorAll('.vaegacion');

navegacion[0].appendChild(nuevoLink);

navegacion[1].appendchild(nuevoLink2);

//console.log(navegacion);




----EVENTOS-----------------------------------------
    

console.log(1);

windows.addEventListener('load',function(){//load espera a que js y los archivos que dependen del html esten listos
    console.log("estoy en el evento");
});


document.addEventListener('DOMContentLoaded',function(){//solo espera que se descargue el html
    console.log(4);
});


windows.onscroll=function(){
    console.log("Scrolling...");

}


console.log(5);



----seleccionar elementos y asociarles un evento-----------------------------------------


const btnEnviar=document.querySelector('.boton--primario');

btnenviar.addEventListener('click', function(evento){
    console.log(evento);
    //evento.preventDefault();      //permite interrunpir la recarga de la pagina cuando se envia el formulario

    //VALIDAR FORMULARIO

    console.log("enviando formulario..");
    //CTRL+K+C      CTRL+K+U
});



----evento de Submit-----------------------------------------


const formulario=document.querySelector('.formulario');

formulario.addEventListener('submit', function(event){
    event.preventDefault();

    //aca se valida formulario

    //luego se envian los datos

    console.log("Enviando Formulario 2...");
});





----Eventos de los inputs y text area-----------------------------------------


//CREO UN OBJETO

const datos={
    nombre: '',
    email: '',
    mensaje: ''
}

//obtener elementos de html necesarios

const nombre=document.querySelector('#nombre');
const email=document.querySelector('#email');
const mensaje=document.querySelector('#mensaje');
const formulario=document.querySelector('#formulario');
const contador=document.createElement('P');

formulario.appendChild(contador); 


//--------------Esto solo para entender el evento de input---------------------------------------------------

nombre.addEventListener('input', function(e){       //probar 'change'
    console.log(e.target.value);
});

emial.addEventListener('input', function(e){
    console.log(e.target.value);
});

mensaje.addEventListener('input', function(e){
    console.log(e.target.value);
});

//-------GUARDO VALORES EN ATRIBUTOS DEL OBJETO DATOS----------

//esto si hacemos



CONTIUAMOS LO MISMO EN LA SIGUIENTE CLASE



https://bem-cheat-sheet.9elements.com/



--------------------------------------------------clase 21----------------------------------------------
VIDEO JS7 18/5 comenzando 



//-------GUARDO VALORES EN ATRIBUTOS DEL OBJETO DATOS----------

//esto si hacemos

nombre.addEventListener('input', function(event){
    datos.nombre=event.target.value;
    console.log(datos.nombre);
});
email.addEventListener('input', function(event){
    datos.email=event.target.value;
});

mensahe.addEventListener('input', function(pepe){
    datos.mensaje=pepe.target.value; //guarda en el momento todo lo que va escribiendo

    //destructuring             //obtener de alguna manera en una variable algun atributo del objeto
    const {mensaje} =datos;        // no es el mismo mensaje del objeto datos pero proviene de ahi, ahora mensaje es una variable

    if(mensaje.length>=20){
        mostrarmensaje("El mnejsae es demasiado largo.",true);
        return;
    }


    mostrarContador(mensaje.length, contador);

});








https://www.w3schools.com/jsref/dom_obj_event.asp