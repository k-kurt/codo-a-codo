-------------------------------------------clase 22-----------------------------------------
comenzamos con base de datos descargando MySQL


-------------------------------------------clase 23 1/6/23-----------------------------------------

varchar 
text
int 
float
tipo fecha datetime

primary key
    una primary key es una columna o un conjunto de columna en una tabla cuyos valores identifica de forma unica una fila
    es decir, es una columna dentro de una tabla que identifica a un unico registro, cada uno de sus valores
    pueden ser numeros, alfanumericos y pueden ser compuestos, podemos componerlos a apartir de 2 tablas, de 2 campos

foreing key
    es una columna o conjunto de valores de una tabla que se relacionan con la primary key de otra tabla
    Es una columna o un conjunto de columna en una tabla cuyo valores corresponden a los valores de la clave primaria de la otra tabla


DER

    Entidades
        Departamento
        Empleado
    RELACION 
        Tiene
    ATRIBUTOS/TABLAS
        Empleado
            legajo
            nombre
            apellido
        Departamento
            id_depto
            nombre
    CARDINALIDAD
        muchos(n) Empleado tiene un Departamento(1)
        un Departamento(1) tiene muchos Empleado(n)
        


    no es necesario que las entidades tenga relacion una con otra

    En el otro diagrama

    --||-------------------------||--   es uno a uno

    /|\---------------------------/|\   es mucho a mucho


    SENTENCIAS---------------

    SELECT 
        siempre nos permite seleccionar alguno o todos los elementos de una determinada tabla,
        siempre va acompaniado del FROM
        si uso * significa que quiero ver todas las columnas


        SELECT * FROM world.city ;
        SELECT Name, CountryCode, District FROM world.city;


    WHERE
        una condicional que significa donde



        select * from city where Population > 2000000;

        select * from city where Population >=2000000 and CountryCode ="ARG";


    NOT
        negar


         SELECT * from city WHERE Population >=2000000 AND NOT CountryCode ="ARG";    


    ORDER BY 

        permite ordenar por un determinado campos

        SELECT * from city WHERE Population >=2000000 AND  CountryCode ="ARG" ORDER BY name DESC; 


        SELECT * from city WHERE Population >=2000000 AND  CountryCode ="ARG" ORDER BY name AND Population;
    

    LIMIT

        limitar las coincidencias


        SELECT * from city WHERE Population >=2000000 ORDER BY name DESC LIMIT 10; 




    LIKE

        buscar coincidencia en varchar dependiendo condicion

        
        buscar todo lo que termina con "a"
        SELECT * FROM city
        WHERE Name LINKE "%a"
        ORDER BY Name AND Population;

        buscar todo lo que empieza con "a"
        SELECT * FROM city
        WHERE Name LINKE "a%"
        ORDER BY Name AND Population;


        buscar todo lo que tenga "or" en medio
        SELECT * FROM city
        WHERE Name LINKE "%or%"
        ORDER BY Name AND Population;


        BETWEEN

            buscar entre 2 rangos

        SELECT * FROM city
        WHERE Population BETWEEN 1000000 AND 2000000
        ORDER BY Name AND Population;


        FUNCIONES DE AGREGACION


          SELECT max(Population) FROM city;


        SUBCONSULTAS

        SELECT name, population  FROM city WHERE Population=(SELECT max(Population) FROM city);      



-------------------------------------------clase 24 8/6/23-----------------------------------------

INSERT
    insertamos datos en la tabla usuarios

    
    SELECT * FROM codoacodo_com_23046.usuarios;
    
    INSERT INTO `codoacodo_com_23046`.`usuarios` (`nombre`, `apellido`, `edad`, `tiene_hijos`, `fecha_nac`) 
    VALUES ('kevin', 'sboboda', '26', '1', '1997-04-09'),('kurt', 'sboboda', '26', '1', '1997-04-09'),
    ('maria', 'sboboda', '26', '1', '1997-04-09'),('gisel', 'sboboda', '26', '1', '1997-04-09');

    SI TIRA UN WARNING, AGREGO LOS DATOS IGUAL A LA BBDD PERO LO SETEA AL FORMATO DECLARADO


UPDATE

    Nos permite modificar una o varios registros segun id

    UPDATE `codoacodo_com_23046`.`usuarios` SET `edad` = '20', `fecha_nac` = '2004-04-09' WHERE (`id` = '2');
    UPDATE `codoacodo_com_23046`.`usuarios` SET `nombre` = 'lucas', `apellido` = 'roperto', `edad` = '36', `tiene_hijos` = '5', `fecha_nac` = '1987-04-09' WHERE (`id` = '3');
    UPDATE `codoacodo_com_23046`.`usuarios` SET `nombre` = 'abel', `apellido` = 'lopez', `edad` = '23', `tiene_hijos` = '2', `fecha_nac` = '2000-04-09' WHERE (`id` = '4');
    UPDATE `codoacodo_com_23046`.`usuarios` SET `apellido` = 'asas', `edad` = '2', `fecha_nac` = '2020-04-09' WHERE (`id` = '5');


    EL UPDATE SE TIENE CAA UNO POR REGISTRO, NO SE PUEDE MULTIPLE


DELETE

    eliminar una fila

    DELETE FROM `codoacodo_com_23046`.`usuarios` WHERE (`id` = '2');


----------------------JAVA----------------------------------------




-------------------------------------------clase 25 13/6/23-----------------------------------------

ENCAPSULAMIENTO
    
    se trata de responsabilidad propia de la clase mediante metodos, por eso el atributo es
    privado. y quine puede acceder a ciertos elementos
    


siempre hay que hacer buena practica y siempre hacer los getters y setters



    sout


-------------------------------------------clase 26 15/6/23-----------------------------------------


TO STRING


    @Override
    public String toString() {
        return "Perro{" + "nombre=" + nombre + ", tieneVacunas=" + tieneVacunas + ", colorPelo=" + colorPelo + '}';
    }


        public static void main(String[] args) {
        // TODO code application logic here
        
        Perro p=new Perro("sofi", true, "blanco");
        System.out.println(p.toString());
        
    }


COLECCIONES

        ArrayList
        
        
        ArrayList<Perro> arrayDePerros=new ArrayList();
        
        dentro de los picos va ir el tipo de dato de los objetos que voy a guardar
        Si voy a guardar perros entonces pongo Perro, chihuahua entonces chihuahua
        Las colecciones guardas objectos, no pueden guardar primitivos

       --------------OTRO TIPO DE COLECCION

       HashMap


       todo lo que provenga de Hash, la particularidad del HashMap cada elemento contiene un par k(id) value 
       de objetos, cada elemento esta computo por un par de objetos


       HashMap <Integer, String> setDeNumeros=new HashMap();
        
       
       entre los picos decimos de que tipos de objetos y va integer por que int es de tipo primitivo
       en cambio integer es una clase
       el metodo get en este caso en el for hace referencia al value del k(id) de la coleccion
       en vez de hacer referencia al subindice

Los HashMap se suelen usar para cosas bien especificas, vamos a usar mas arrayList
     
-------------------------------------------------
        Automatizar creacion de objectos por consola

          utilizamos el obecto Scanner para leer cosas de la consola

          Scanner sc=new Scanner(System.in);

          




-------------------------------------------clase 27 22/6/23-----------------------------------------

    BORRAR PERRITO DE LA COLECCION

el metodo remove, podemos pasar un objeto pero tendriamos que buscarlo y pasarlo, entonces 
en este caso pasamos el indice 

    POLIMORFISMO

Nos permite cambiarke la forma a un objeto. una clase padre no puede ver los metodos de sus hijos

    List <Perro> arraDePerros=new ArrayList();

creamos un list pero lo tranformamos en un arrayList para poder usar sus funciones
o en cualquiera que sea derivado del list


    CONECTAR UNA BASE DE DATOS EN JAVA

Crear proyecto "java witch Maven" 
    Nos permite gestionar las clases, las dependencias, las librerias externas a la API de Java
    en un archivo de configuracion.
    En el archivo pom.xml en parte de Proyect Files, se agregan las librerias)depedencias)
    Se descargan automaticamente todo lo necesario


    Lo hacemos de la siguiente manera:
        

        <dependencies>
            <dependency>
                x dependencia 
            <\dependency>
        <\dependencies>



    Dependencia de MySql

    <dependency>
           <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.29</version>
    </dependency>
        

    <dependencies>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.31</version>
        </dependency>
    </dependencies>



TERMINADO



-------------------------------------------clase 28 27/6/23-----------------------------------------
            

            PATRON DAO

nos ayuda a organizar todo, nos abstrae todo lo referente  a SQL y todo lo referente a java 
El patron nos indica que debemos divir en paquetes el proyecto.

    -Creamos el paquete modelo
 donde deberiamos representar las entidades o las tablas de nuestra base de datos, donde creamos
las variables en una clase que represente a la tabla, la variable con nombre de las columnas de la tabla

    -Paquete de data
Puede estar divido o no, depende de como lo querramos hacer. Donde tenemos la class Conexion donde vamos a tener una conexion
para hacer las consultas y la clase UserDao en este caso por que tenemos la class users en el paquete modelo, donde usersDao 
hace la consulta a la base de datos y la class users va a brindar objetos donde yo puedo guardar los registros de mi base 
de datos 
    
    -



            METODO INSERTAR
//le decimos que reciba un usuario, que tiene cargado los elementos a modificar, que esta en el parametro 
SQL_INSERT
INSERT INTO usuarios(usuarios(nombre, apellido, edad, tiene_hijos, baja)

Lo hago mediante los setters del PreparedStatement, que posee getteers y setters, diciendole en que orden esta, siempre
arrancando de 1

PreparedStatement stmt = null;

stmt.setString(1, user.getNombre());
stmt.setString(2, user.getApellido());
stmt.setBoolean(3,false);

A diferencia del Select que se egecuta a travez del 
rs=stmt.executeQuery();
en el Actualizar se utiliza
 registros = stmt.executeUpdate();

                        COMO REGLA GENERAL
para todo lo que no sea un SELECT se utiliza EXECUTEUPDATE por que el EXECUTEQUERY retorna un ResultSet 
entonces si voy a ejecutar un SQL_UPDATE y un SQL_DELETE voy a usar executeUpdate; para consulta un executeQuery


TERMINADO


-------------------------------------------clase 29 29/6/23-----------------------------------------

ARQUITECTURA MVC
    modelo vista controlador, al recibir un request, el mvc va a estar comunicandose con la capa DAO
    al presionar el boton ENVIAR, hace una peticion al servidor, en el Server esta el MVc y la capa DAO
    el servidor responde con datos, la respuesta del servidor al cliente se llama JSP, es una forma de que java incorpore codigo 
    de jaba en un archivo html
    

cliente                                     SERVER
      ---> request--->                  MVC            DAO            
                           <---JSP<---      <--datos--    
                                 

el MVC esta constituido por:

    VISTA 
    
 la vista es el cliente, cuand el modelo le da la respuesta al controlador, el controlador ya tiene todo entonces genera una jsp
al cliente, la vista. 

    CONTROLADOR

el controlador siempre se va  encargar de responder al cliente, se encarga de las responsive y las request
le v a pedir al modelo 

    MODELO

 genera la informacion que necesita el controlador, el modelo realiza la accion de cumplir la request


La vista(el cliente) hace una request al controlador, el controaldor le da un mensaje al modelo, que realice tal accion, entonces
el modelo le da unas respuesta y el controlador devuelve a la vista un jsp




            Creacion del proyecto
Creamos un proyecto sleccionando Java with maven--> Web Application







descargar el 5.0
https://javaee.github.io/glassfish/download



en el POM
en dependecis

<dependency>
           <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.29</version>
        </dependency>


<dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.9.0</version>
        </dependency>

la dirrecion a la base de datos
jdbc:mysql://localhost:3306/libros?useSSL=false&useTimeZone=true&serverTimeZone=UTC&allowPublicKeyRetrieval=true

metodo de cerrar conexion
public static void close(ResultSet rs) throws SQLException{
        rs.close();
    }




TERMINADO

-------------------------------------------clase ** 4/7/23-----------------------------------------







-------------------------------------------clase ** 6/7/23-----------------------------------------


href="${pageContext.request.contextPath}/servletControlador?accion=editar&idLibro=${libro.idlibros}" class="btn btn-secondary"



-------------------------------------------clase ** 11/7/23-----------------------------------------

<dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>${jakartaee}</version>
            <scope>provided</scope>
        </dependency>



try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace(System.out);
        }





-------------------------------------------clase ** 13/7/23-----------------------------------------

